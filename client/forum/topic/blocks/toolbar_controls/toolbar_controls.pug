- var topicStatuses = '$$ JSON.stringify(N.models.forum.Topic.statuses) $$'
- var subscriptionTypes = '$$ JSON.stringify(N.models.users.Subscription.types) $$'
- var topicOwnerId = self.topic.cache.first_user
- var menu_rnd_id = 'rnd' + self.get_label_uid()

- var isOpen = (self.topic.st === topicStatuses.OPEN || self.topic.ste === topicStatuses.OPEN);

- var items = []


if self.settings.forum_can_reply && isOpen && self.section.is_writable
  - items.push('post_add')

if self.runtime.is_member
  - items.push('subscription')


if topicOwnerId === self.runtime.user_id

  if self.settings.forum_edit_max_time === 0 || new Date(self.topic.cache.first_ts).getTime() > Date.now() - self.settings.forum_edit_max_time * 60 * 1000
    if self.topic.st !== topicStatuses.DELETED && self.topic.st !== topicStatuses.DELETED_HARD
      - items.push('delete')

  if self.settings.forum_can_close_topic
    if self.topic.st === topicStatuses.OPEN || self.topic.ste === topicStatuses.OPEN
      - items.push('close')
    if self.topic.st === topicStatuses.CLOSED || self.topic.ste === topicStatuses.CLOSED
      - items.push('open')

if self.topic.edit_count > 0
  - items.push('history')

if items.length > 0
  - items.push('divider')

- items.push('header')

if self.settings.forum_mod_can_delete_topics
  if self.topic.st === topicStatuses.DELETED || self.topic.st === topicStatuses.DELETED_HARD
    - items.push('mod_undelete')
  else
    - items.push('mod_delete')

if self.settings.forum_mod_can_close_topic
  if self.topic.st === topicStatuses.OPEN || self.topic.ste === topicStatuses.OPEN
    - items.push('mod_close')
  if self.topic.st === topicStatuses.CLOSED || self.topic.ste === topicStatuses.CLOSED
    - items.push('mod_open')

if self.settings.forum_mod_can_pin_topic
  if self.topic.st === topicStatuses.PINNED
    - items.push('mod_unpin')
  if self.topic.st === topicStatuses.OPEN || self.topic.st === topicStatuses.CLOSED
    - items.push('mod_pin')

if self.settings.forum_mod_can_delete_topics
  - items.push('mod_move')

//- If last item is header - remove it
if items.length > 0 && items[items.length - 1] === 'header'
  - items.pop()

//- If last item is devider - remove it
if items.length > 0 && items[items.length - 1] === 'divider'
  - items.pop()

if self.selected_cnt
  if items.length > 0
    - items.push('divider')
  - items.push('many_header')
  - items.push('many_unselect')
  if self.settings.forum_mod_can_delete_topics
    - items.push('many_delete')
  - items.push('many_undelete')

.page-actions.forum-topic__toolbar-controls
  if self.settings.forum_can_reply && isOpen && self.section.is_writable
    button.hidden-nav-alt.btn.btn-primary.btn-square.d-none.d-sm-inline-block.icon.icon-plus(
      type='button'
      data-on-click='forum.topic:reply'
      title=self.t('post_add')
    )
    button.hidden-page-head.btn.btn-secondary.btn-square.d-none.d-sm-inline-block.icon.icon-plus(
      type='button'
      data-on-click='forum.topic:reply'
      title=self.t('post_add')
    )

  - var subscriptionIcon = 'icon-track-normal'
  - var subscriptionTitle = self.t('subs_normal')

  if (self.subscription === subscriptionTypes.MUTED)
    - subscriptionIcon = 'icon-track-muted'
    - subscriptionTitle = self.t('subs_muted')
  else if (self.subscription === subscriptionTypes.TRACKING)
    - subscriptionIcon = 'icon-track-tracking'
    - subscriptionTitle = self.t('subs_tracking')
  else if (self.subscription === subscriptionTypes.WATCHING)
    - subscriptionIcon = 'icon-track-watching'
    - subscriptionTitle = self.t('subs_watching')

  if (self.subscription && self.subscription !== subscriptionTypes.NORMAL)
    button.btn.btn-secondary.btn-square.d-none.d-sm-inline-block.icon(
      type='button'
      title=subscriptionTitle
      class=subscriptionIcon
      data-on-click='forum.topic:subscription'
      data-topic-hid=self.topic.hid
      data-topic-subscription=self.subscription
    )

  if items.length > 0
    .page-actions__dropdown
      button.btn.btn-secondary.btn-square.icon.icon-dropdown.dropdown-toggle(
        type='button'
        id=menu_rnd_id
        aria-haspopup='true'
        aria-expanded='false'
        data-bs-toggle='dropdown'
      )

      .dropdown-menu.dropdown-menu-end(aria-labelledby=menu_rnd_id)

        each item in items
          case item

            when 'divider'
              .dropdown-divider

            when 'header'
              .dropdown-header= self.t('mod_actions')

            when 'history'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:topic_history'
                data-topic-id=self.topic._id
              )= self.t('history', self.topic.edit_count)

            when 'post_add'
              button.dropdown-item.d-sm-none(
                type='button'
                data-on-click='forum.topic:reply'
              )= self.t('post_add')

            when 'subscription'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:subscription'
                data-topic-hid=self.topic.hid
                data-topic-subscription=self.subscription
              )
                if self.subscription && self.subscription !== subscriptionTypes.NORMAL
                  span.icon.icon-space-after(class=subscriptionIcon)
                = self.t('subscription')

            when 'delete'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:topic_delete'
                data-topic-hid=self.topic.hid
              )= self.t('delete')

            when 'close'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:close'
                data-topic-hid=self.topic.hid
              )= self.t('close')

            when 'open'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:close'
                data-topic-hid=self.topic.hid
                data-reopen='true'
              )= self.t('open')

            when 'mod_delete'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:topic_delete'
                data-topic-hid=self.topic.hid
                data-as-moderator='true'
              )= self.t('delete')

            when 'mod_undelete'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:topic_undelete'
                data-topic-hid=self.topic.hid
              )= self.t('undelete')

            when 'mod_close'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:close'
                data-topic-hid=self.topic.hid
                data-as-moderator='true'
              )= self.t('close')

            when 'mod_open'
              button.dropdown-item(button.dropdown-item
                type='button'
                data-on-click='forum.topic:close'
                data-topic-hid=self.topic.hid
                data-reopen='true'
                data-as-moderator='true'
              )= self.t('open')

            when 'mod_pin'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:pin'
                data-topic-hid=self.topic.hid
              )=self.t('pin')

            when 'mod_unpin'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:pin'
                data-topic-hid=self.topic.hid
                data-unpin='true'
              )=self.t('unpin')

            when 'mod_move'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:move'
                data-topic-hid=self.topic.hid
              )=self.t('move')

            when 'many_header'
              .dropdown-header=self.t('many_header', { count: self.selected_cnt })

            when 'many_unselect'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:posts_unselect'
              )=self.t('many_unselect')

            when 'many_delete'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:delete_many'
              )= self.t('many_delete')

            when 'many_undelete'
              button.dropdown-item(
                type='button'
                data-on-click='forum.topic:undelete_many'
              )= self.t('many_undelete')
