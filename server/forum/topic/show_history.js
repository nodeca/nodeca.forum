// Show edit history
//

'use strict';


const _                = require('lodash');
const sanitize_section = require('nodeca.forum/lib/sanitizers/section');


module.exports = function (N, apiPath) {

  N.validate(apiPath, {
    topic_id: { format: 'mongo', required: true }
  });


  // Check permissions
  //
  N.wire.before(apiPath, async function check_permissions(env) {
    let can_see_history = await env.extras.settings.fetch('can_see_history');

    if (!can_see_history) throw N.io.FORBIDDEN;
  });


  // Fetch topic
  //
  N.wire.before(apiPath, async function fetch_topic(env) {
    let topic = await N.models.forum.Topic.findById(env.params.topic_id).lean(true);

    if (!topic) throw N.io.NOT_FOUND;

    env.data.topic = topic;
  });


  // Check if user can see this topic
  //
  N.wire.before(apiPath, async function check_access(env) {
    let access_env = { params: {
      topics: env.data.topic,
      user_info: env.user_info
    } };

    await N.wire.emit('internal:forum.access.topic', access_env);

    if (!access_env.data.access_read) throw N.io.NOT_FOUND;
  });


  // Using different sanitizer here,
  // because we need to expose editable fields (md) and don't need
  // autogenerated ones (bookmarks, views, html)
  //
  function sanitize_topic(topic) {
    if (!topic) return topic; // nothing to sanitize

    // we can always hide HB status, because it doesn't affect client diffs
    if (topic.st === N.models.forum.Topic.statuses.HB) {
      topic = Object.assign({}, topic);
      topic.st = topic.ste;
      delete topic.ste;
    }

    if (topic.prev_st && topic.prev_st.st === N.models.forum.Topic.statuses.HB) {
      topic.prev_st = Object.assign({}, topic.prev_st);
      topic.prev_st.st = topic.prev_st.ste;
      delete topic.prev_st.ste;
    }

    return _.pick(topic, [
      'title',
      'section',
      'st',
      'ste',
      'del_reason',
      'del_by',
      'prev_st'
    ]);
  }


  // Fetch and return topic edit history
  //
  N.wire.on(apiPath, async function get_topic_history(env) {
    let history = await N.models.forum.TopicHistory.find()
                            .where('topic').equals(env.data.topic._id)
                            .sort('_id')
                            .lean(true);

    let history_meta = [ {
      user: env.data.topic.cache.first_user,
      ts:   env.data.topic.cache.first_ts,
      role: N.models.forum.TopicHistory.roles.USER
    } ].concat(
      history.map(i => ({ user: i.user, ts: i.ts, role: i.role }))
    );

    let history_topics = history.map(i => i.topic_data)
                          .concat([ env.data.topic ])
                          .map(sanitize_topic);

    env.res.history = _.zip(history_meta, history_topics)
                       .map(([ meta, topic ]) => ({ meta, topic }));

    env.data.users = (env.data.users || []).concat(env.res.history.map(i => i.meta.user));
  });


  // Fetch sections
  //
  N.wire.after(apiPath, async function fetch_sections(env) {
    let sections = [];
    let section_ids = _.uniq(env.res.history.map(i => i.topic.section).filter(Boolean).map(String));

    if (section_ids) {
      sections = await N.models.forum.Section.find()
                           .where('_id').in(section_ids)
                           .lean(true);
    }

    env.res.sections = _.keyBy(await sanitize_section(N, sections, env.user_info), '_id');
  });
};
