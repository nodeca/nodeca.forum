- var profile_name = self.author.user_name;
- var profile_url = self.link_to('users.member', { user_hid: self.author.user_hid });
=self.t('header', { url: '[' + profile_name + '](' + profile_url + ')' })
= '\n'

-
  function escape_md(text) {
    return text.replace(/([!#$%&*+\-:<=>@[\\\]^_`{}~])/g, '\\$1');
  }

  // calculate minimum backtick length for ````quote, so it would encapsulate
  // original content (longest backtick sequence plus 1, but at least 3)
  var backtick_seq_len = Math.max.apply(
    null,
    ('`` ' + self.report_text + ' ' + self.src_text)
      .match(/`+/g)
      .map(s => s.length)
  ) + 1;
  var backticks = '`'.repeat(backtick_seq_len);

= '\n'
if self.move_to_link
  -
    var move_to_args = {
      move_from_link: self.move_from_link,
      move_from_title: self.move_from_title,
      move_to_link: self.move_to_link,
      move_to_title: self.move_to_title,
      src_title: self.src_title,
      src_url: self.src_url
    }
  != self.t('move_to', move_to_args)
  = '\n\n'
  != self.t('move_link')
  = '\n\n'
  | [#{self.move_link}](#{self.move_link})
  = '\n\n'
else
  = backticks + 'quote\n'
  = self.report_text + '\n'
  = backticks + '\n'
  = '\n'
  = self.t('to', { url: self.src_url }) + '\n'
  = '\n'
  = backticks + 'quote\n'
  = self.src_text + '\n'
  = backticks + '\n'
  = '\n'

if self.recipients && self.recipients.length
  =self.t('message_sent_to')
  each recipient, index in self.recipients
   | [#{recipient.user_name}](#{self.link_to('users.member', { user_hid: recipient.user_hid })})
   if index !== self.recipients.length - 1
     | , 
